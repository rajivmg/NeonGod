#include "neon_math.h"

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////
////  vec2
////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
vec2::vec2()
{
	Elements[0] = 0;
	Elements[1] = 0;
}

vec2::vec2(r32 X, r32 Y)
{
	Elements[0] = X;
	Elements[1] = Y;
}

vec2::vec2(s32 X, s32 Y)
{
	Elements[0] = (r32)X;
	Elements[1] = (r32)Y;
}

vec2 vec2::operator+(vec2 const & V2)
{
	return vec2(X + V2.X, Y + V2.Y);
}

vec2 vec2::operator-(vec2 const & V2)
{
	return vec2(X - V2.X, Y - V2.Y);
}

vec2 vec2::operator-()
{
	return vec2(-X, -Y);
}

r32 vec2::Dot(vec2 const & V2)
{
	return (r32)((X * V2.X) + (Y * V2.Y));
}

vec2 vec2::Cross(vec2 const & V2)
{
	return vec2();
}

r32 vec2::Length()
{
	return (r32)sqrt((X*X) + (Y*Y));
}

vec2::~vec2()
{
}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////
////  vec3
////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
vec3::vec3()
{
	Elements[0] = 0;
	Elements[1] = 0;
	Elements[2] = 0;
}

vec3::vec3(r32 X, r32 Y, r32 Z)
{
	Elements[0] = X;
	Elements[1] = Y;
	Elements[2] = Z;
}

vec3::vec3(s32 X, s32 Y, s32 Z)
{
	Elements[0] = (r32)X;
	Elements[1] = (r32)Y;
	Elements[2] = (r32)Z;
}

vec3::vec3(vec2 V2, r32 Z)
{
	Elements[0] = V2.X;
	Elements[1] = V2.Y;
	Elements[2] = Z;
}

vec3 vec3::operator+(vec3 const & V3)
{
	return vec3(X + V3.X, Y + V3.Y, Z + V3.Z);
}

vec3 vec3::operator-(vec3 const & V3)
{
	return vec3(X - V3.X, Y - V3.Y, Z - V3.Z);
}

vec3 vec3::operator-()
{
	return vec3(-X, -Y, -Z);
}

r32 vec3::Dot(vec3 const & V3)
{
	return (r32)((X * V3.X) + (Y * V3.Y) + (Z * V3.Z));
}

vec3 vec3::Cross(vec3 const & V3)
{
	return vec3();
}

r32 vec3::Length()
{
	return (r32)sqrt((X*X) + (Y*Y) + (Z*Z));
}

vec3::~vec3()
{
}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////
////  vec4
////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

vec4::vec4()
{
	Elements[0] = 0;
	Elements[1] = 0;
	Elements[2] = 0;
	Elements[3] = 0;
}

vec4::vec4(r32 X, r32 Y, r32 Z, r32 W)
{
	Elements[0] = X;
	Elements[1] = Y;
	Elements[2] = Z;
	Elements[3] = W;
}

vec4::vec4(s32 X, s32 Y, s32 Z, s32 W)
{
	Elements[0] = (r32)X;
	Elements[1] = (r32)Y;
	Elements[2] = (r32)Z;
	Elements[3] = (r32)W;
}

vec4::vec4(vec3 V3, r32 W)
{
	Elements[0] = V3.X;
	Elements[1] = V3.Y;
	Elements[2] = V3.Z;
	Elements[3] = W;
}

vec4::vec4(vec2 V21, vec2 V22)
{
	Elements[0] = V21.X;
	Elements[1] = V21.Y;
	Elements[2] = V22.X;
	Elements[3] = V22.Y;
}

vec4 vec4::operator+(vec4 const & V4)
{
	return vec4(X + V4.X, Y + V4.Y, Z + V4.Z, W + V4.W);
}

vec4 vec4::operator-(vec4 const & V4)
{
	return vec4(X - V4.X, Y - V4.Y, Z - V4.Z, W - V4.W);
}

vec4 vec4::operator-()
{
	return vec4(-X, -Y, -Z, -W);
}

r32 vec4::Dot(vec4 const & V4)
{
	return (r32)((X*V4.X) + (Y*V4.Y) + (Z*V4.Z) + (W*V4.W));
}

vec4 vec4::Cross(vec4 const & V4)
{
	return vec4();
}

r32 vec4::Length()
{
	return (r32)sqrt((X*X) + (Y*Y) + (Z*Z) + (W*W));
}

vec4::~vec4()
{
}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////
////  mat2
////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
mat2::mat2()
{
	m00 = 1; m01 = 0;
	m10 = 0; m11 = 1;
}

mat2::~mat2()
{

}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////
////  mat3
////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
mat3::mat3()
{
	m00 = 0; m01 = 0; m02 = 0;
	m10 = 0; m11 = 0; m12 = 0;
	m20 = 0; m21 = 0; m22 = 0;
}

mat3::~mat3()
{

}

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////
////  mat4
////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
mat4::mat4()
{
	m00 = 0; m01 = 0; m02 = 0; m03 = 0;
	m10 = 0; m11 = 0; m12 = 0; m13 = 0;
	m20 = 0; m21 = 0; m22 = 0; m23 = 0;
	m30 = 0; m31 = 0; m32 = 0; m33 = 0;
}

mat4::~mat4()
{

}

mat4 OrthoMat4(r32 L, r32 R, r32 T, r32 B, r32 N, r32 F)
{
	mat4 Matrix;
	Matrix.m00 = 2/(R-L); 		Matrix.m01 = 0; 			Matrix.m02 = 0; 			Matrix.m03 = -(R+L)/(R-L);
	Matrix.m10 = 0; 			Matrix.m11 = 2/(T-B); 		Matrix.m12 = 0; 			Matrix.m13 = -(T+B)/(T-B);
	Matrix.m20 = 0; 			Matrix.m21 = 0; 			Matrix.m22 = -2/(F-N); 		Matrix.m23 = -(F+N)/(F-N);
	Matrix.m30 = 0; 			Matrix.m31 = 0; 			Matrix.m32 = 0; 			Matrix.m33 = 1;

	return Matrix;
}